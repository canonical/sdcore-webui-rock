diff --git a/proto/server/configEvtHandler.go b/proto/server/configEvtHandler.go
index fe34d81..f7e3619 100644
--- a/proto/server/configEvtHandler.go
+++ b/proto/server/configEvtHandler.go
@@ -76,7 +76,10 @@ func configHandler(configMsgChan chan *configmodels.ConfigMessage, configReceive
 	if factory.WebUIConfig.Configuration.Mode5G == true {
 		go Config5GUpdateHandle(subsUpdateChan)
 	}
-	firstConfigRcvd := false
+	firstConfigRcvd := firstConfigReceived()
+	if firstConfigRcvd {
+		configReceived <- true
+	}
 	for {
 		configLog.Infoln("Waiting for configuration event ")
 		select {
@@ -203,6 +206,15 @@ func handleNetworkSlicePost(configMsg *configmodels.ConfigMessage, subsUpdateCha
 	rwLock.Unlock()
 }
 
+func firstConfigReceived() bool {
+	if len(getDeviceGroups()) > 0 {
+		return true
+	} else if len(getSlices()) > 0 {
+		return true
+	}
+	return false
+}
+
 func getDeviceGroups() []*configmodels.DeviceGroups {
 	rawDeviceGroups := RestfulAPIGetMany(devGroupDataColl, nil)
 	var deviceGroups []*configmodels.DeviceGroups
diff --git a/proto/server/configEvtHandler_test.go b/proto/server/configEvtHandler_test.go
index b283bb1..8287ab2 100644
--- a/proto/server/configEvtHandler_test.go
+++ b/proto/server/configEvtHandler_test.go
@@ -273,12 +273,12 @@ func Test_handleNetworkSlicePost_alreadyExists(t *testing.T) {
 	}
 }
 
-func Test_handleSubscriberPost(* testing.T) {
+func Test_handleSubscriberPost(*testing.T) {
 	imsi := "1234"
 	factory.WebUIConfig.Configuration.Mode5G = true
 	configMsg := configmodels.ConfigMessage{
 		MsgType: configmodels.Sub_data,
-		Imsi:   imsi,
+		Imsi:    imsi,
 	}
 
 	postData = make([]map[string]interface{}, 0)
@@ -298,4 +298,51 @@ func Test_handleSubscriberPost(* testing.T) {
 	if result["ueId"] != imsi {
 		t.Errorf("Expected ueId %v, got %v", imsi, result["ueId"])
 	}
-}
\ No newline at end of file
+}
+
+func fakeTwoCallsMongoGetMany(one []map[string]interface{}, two []map[string]interface{}) func(string, primitive.M) []map[string]interface{} {
+	called := false
+	return func(_ string, _ primitive.M) []map[string]interface{} {
+		if !called {
+			called = true
+			return one
+		}
+		return two
+	}
+}
+
+func Test_firstConfigReceived_noConfigInDB(t *testing.T) {
+	RestfulAPIGetMany = fakeTwoCallsMongoGetMany(nil, nil)
+	result := firstConfigReceived()
+	if result {
+		t.Errorf("Expected firstConfigReceived to return false, got %v", result)
+	}
+}
+
+func Test_firstConfigReceived_deviceGroupInDB(t *testing.T) {
+	testGroup := deviceGroup("testGroup")
+	var previousGroupBson bson.M
+	previousGroup, _ := json.Marshal(testGroup)
+	json.Unmarshal(previousGroup, &previousGroupBson)
+	var groups []map[string]interface{}
+	groups = append(groups, previousGroupBson)
+	RestfulAPIGetMany = fakeTwoCallsMongoGetMany(groups, nil)
+	result := firstConfigReceived()
+	if !result {
+		t.Errorf("Expected firstConfigReceived to return true, got %v", result)
+	}
+}
+
+func Test_firstConfigReceived_sliceInDB(t *testing.T) {
+	testSlice := networkSlice("testGroup")
+	var previousSliceBson bson.M
+	previousSlice, _ := json.Marshal(testSlice)
+	json.Unmarshal(previousSlice, &previousSliceBson)
+	var slices []map[string]interface{}
+	slices = append(slices, previousSliceBson)
+	RestfulAPIGetMany = fakeTwoCallsMongoGetMany(nil, slices)
+	result := firstConfigReceived()
+	if !result {
+		t.Errorf("Expected firstConfigReceived to return true, got %v", result)
+	}
+}
